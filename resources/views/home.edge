<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Minha Loja - Produtos</title>
  <!-- Carregando o Tailwind CSS via CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 font-sans relative">
  <!-- Header -->
  <header class="bg-white shadow-md p-4 flex justify-between items-center">
    <div class="text-2xl font-bold text-gray-800">Minha Loja</div>
    <div class="flex items-center space-x-6">
      <!-- Área do Usuário -->
      <div class="flex items-center space-x-2">
        <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                d="M5.121 17.804A9 9 0 1118.879 6.196M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
        </svg>
        <span class="text-gray-700">Usuário</span>
      </div>
      <!-- Carrinho -->
      <div class="relative">
        <button id="cartButton" class="flex items-center focus:outline-none p-4">
          <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13l-1.5 7.5a1 1 0 001 1.5h12a1 1 0 001-1.5L17 13M7 13h10" />
          </svg>
        </button>
        <span class="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white bg-red-600 rounded-full">
          3
        </span>
      </div>
    </div>
  </header>

  <!-- Conteúdo Principal -->
  <main class="container mx-auto p-4">
    <h1 class="text-3xl font-bold text-gray-800 mb-6">Produtos</h1>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      @if(produtos && produtos.length > 0)
        @each(produto in produtos)
          <div class="bg-white p-4 rounded-lg shadow">
            <h2 class="text-xl font-semibold text-gray-800 mb-2">{{ produto.nome }}</h2>
            <p class="text-gray-600 mb-2">{{ produto.descricao }}</p>
            <p class="text-blue-500 font-bold mb-4">R$ {{ Number(produto.preco).toFixed(2) }}</p>
            <!-- Botão para abrir os modais de detalhes e carrinho -->
            <button 
              onclick="openDetailsModal({{ produto.id }})" 
              class="block bg-blue-500 text-white py-2 text-center rounded hover:bg-blue-600"
            >
              Ver Detalhes
            </button>
          </div>
        @endeach
      @else
        <div class="col-span-3 text-center">
          Nenhum produto cadastrado.
        </div>
      @endif
    </div>
  </main>

  <!-- Modal do Carrinho (lado direito) -->
  <div id="cartModal" 
       class="fixed top-0 right-0 h-full w-80 bg-white shadow-lg transform translate-x-full 
              transition-transform duration-300 z-50">
    <div class="p-4 h-full flex flex-col">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-bold">Seu Carrinho</h2>
        <button id="closeCart" class="text-gray-600 text-2xl">&times;</button>
      </div>
      <!-- Conteúdo do Carrinho -->
      <ul class="flex-grow">
        <li class="mb-2">Produto 1 - R$ 50,00</li>
        <li class="mb-2">Produto 2 - R$ 70,00</li>
        <li class="mb-2">Produto 3 - R$ 100,00</li>
      </ul>
      <button class="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600 mt-4">
        Finalizar Compra
      </button>
    </div>
  </div>

  <!-- Modal de Detalhes do Produto (lado esquerdo, oculto por padrão) -->
  <div id="detailsModal" 
       class="fixed top-0 left-0 h-full bg-white shadow-lg transform -translate-x-full 
              transition-transform duration-300 z-40" 
       style="width: calc(100% - 20rem);">
    <div class="p-4 h-full overflow-auto">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-bold">Detalhes do Produto</h2>
        <button id="closeDetails" class="text-gray-600 text-2xl">&times;</button>
      </div>
      <!-- Conteúdo dinâmico dos detalhes do produto -->
      <div id="detailsContent">
        <p>Carregando detalhes do produto...</p>
      </div>
    </div>
  </div>

  <!-- Scripts para controlar os modais -->
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      // Controle do Modal do Carrinho
      const cartButton = document.getElementById('cartButton');
      const cartModal = document.getElementById('cartModal');
      const closeCart = document.getElementById('closeCart');

      if (cartButton && cartModal && closeCart) {
        cartButton.addEventListener('click', () => {
          cartModal.classList.remove('translate-x-full');
        });
        closeCart.addEventListener('click', () => {
          cartModal.classList.add('translate-x-full');
        });
      } else {
        console.error("Um ou mais elementos do carrinho não foram encontrados.");
      }

      // Controle do Modal de Detalhes
      const detailsModal = document.getElementById('detailsModal');
      const closeDetails = document.getElementById('closeDetails');

      if (closeDetails && detailsModal) {
        closeDetails.addEventListener('click', () => {
          detailsModal.classList.add('-translate-x-full');
        });
      } else {
        console.error("Botão ou modal de detalhes não encontrado.");
      }
    });

    // Função para abrir os modais e carregar os detalhes do produto via AJAX
    function openDetailsModal(produtoId) {
      // Abre o modal de detalhes (lado esquerdo)
      const detailsModal = document.getElementById('detailsModal');
      detailsModal.classList.remove('-translate-x-full');

      // Abre o modal do carrinho (lado direito)
      const cartModal = document.getElementById('cartModal');
      cartModal.classList.remove('translate-x-full');

      // Faz uma requisição para buscar os detalhes do produto
      fetch(`/api/produtos/${produtoId}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Erro ao carregar produto');
          }
          return response.json();
        })
        .then(produto => {
          // Atualiza o conteúdo do modal de detalhes com os dados reais
          const detailsContent = document.getElementById('detailsContent');
          detailsContent.innerHTML = `
            <h3 class="text-2xl font-bold mb-2">${produto.nome}</h3>
            <p class="mb-2">${produto.descricao}</p>
            <p class="text-green-700 font-bold mb-2">R$ ${Number(produto.preco).toFixed(2)}</p>
            <p class="mb-2">Quantidade: ${produto.quantidade}</p>
          `;
        })
        .catch(error => {
          console.error(error);
          const detailsContent = document.getElementById('detailsContent');
          detailsContent.innerHTML = `<p>Erro ao carregar detalhes do produto.</p>`;
        });
    }
  </script>
</body>
</html>
