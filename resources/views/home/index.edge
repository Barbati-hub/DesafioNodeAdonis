@layout('layouts/main')

@section('title')
Loja Virtual - Produtos
@endsection

@section('content')
<!-- Grid de Produtos -->
<div class="container mx-auto px-4 mb-12 mt-8">
  <div class="bg-white rounded-lg shadow-lg p-6">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      @if(produtos && produtos.length > 0)
        @each(produto in produtos)
        <div class="bg-white rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 relative group">
          <!-- Imagem do Produto -->
          <div class="relative aspect-square overflow-hidden rounded-t-lg">
            @if(produto.imagem_url)
              <img src="{{ produto.imagem_url }}" alt="{{ produto.nome }}" class="w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-300">
            @else
              <div class="w-full h-full bg-gray-200 flex items-center justify-center">
                <i class="fas fa-image text-gray-400 text-4xl"></i>
              </div>
            @endif
          </div>
          
          <!-- Informa√ß√µes do Produto -->
          <div class="p-4">
            <h3 class="text-sm text-gray-600 mb-2 line-clamp-2 h-10">{{ produto.nome }}</h3>
            
            <!-- Pre√ßos -->
            <div class="mb-3">
              <div class="text-[#FF6500] font-bold text-xl">
                R$ {{ Number(produto.preco).toFixed(2) }}
              </div>
              <div class="text-sm text-gray-600">
                Em at√© 12x de R$ {{ (Number(produto.preco)/12).toFixed(2) }}
              </div>
            </div>
            
            <!-- Status de Estoque -->
            <div class="mb-4">
              @if(produto.quantidade > 0)
              <span class="text-green-500 text-sm flex items-center">
                <i class="fas fa-check-circle mr-1"></i> Em estoque
              </span>
              @else
              <span class="text-red-500 text-sm flex items-center">
                <i class="fas fa-times-circle mr-1"></i> Fora de estoque
              </span>
              @endif
            </div>
            
            <!-- Bot√µes -->
            <div class="space-y-2">
              <button onclick="showProductDetails({{ produto.id }})" 
                      class="w-full bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded-md transition-colors">
                Ver Detalhes
              </button>
              @if(produto.quantidade > 0)
              <button onclick="addToCart({{ produto.id }})"
                      class="w-full bg-[#FF6500] hover:bg-[#e65c00] text-white font-semibold py-2 px-4 rounded-md transition-colors">
                Comprar
              </button>
              @endif
            </div>
          </div>
        </div>
        @endeach
      @else
        <div class="col-span-full text-center py-8 text-gray-500">
          <i class="fas fa-box-open text-4xl mb-4"></i>
          <p>Nenhum produto cadastrado.</p>
        </div>
      @endif
    </div>
  </div>
</div>

<!-- Toast de Notifica√ß√£o -->
<div id="toast" class="fixed bottom-4 right-4 bg-green-500 text-white p-4 rounded-lg shadow-lg transform translate-y-full opacity-0 transition-all duration-300">
  <div class="flex items-center">
    <i class="fas fa-check-circle mr-2"></i>
    <span id="toastMessage"></span>
  </div>
</div>

<script>
// Carrinho de Compras
let cartCount = 0;

async function addToCart(productId) {
  try {
    console.group('--------- 3 - Iniciando addToCart --------');
    
    // Verificar se o usu√°rio est√° logado
    if (!auth.user) {
      console.log('--------- 4 - Usu√°rio n√£o logado --------');
      window.location.href = '/login';
      return;
    }
    
    console.log('üÜî ID do Produto:', productId);

    const requestData = {
      produtoId: productId,
      quantidade: 1
    };
    console.log('--------- 5 - Preparando requisi√ß√£o --------');
    console.log('Dados:', requestData);

    console.log('--------- 6 - Iniciando fetch --------');
    const response = await fetch('/carrinho/adicionar', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(requestData)
    });

    console.log('--------- 7 - Resposta recebida --------');
    console.log('Status:', response.status);
    console.log('Headers:', Object.fromEntries(response.headers.entries()));
    
    const responseText = await response.text();
    console.log('--------- 8 - Texto da resposta --------');
    console.log(responseText);
    
    let data;
    try {
      data = JSON.parse(responseText);
      console.log('--------- 9 - JSON parseado com sucesso --------');
    } catch (e) {
      console.error('--------- 9 - ERRO ao parsear JSON --------');
      console.error(e);
      throw new Error('Erro ao processar resposta do servidor');
    }

    if (!response.ok) {
      console.error('--------- 10 - Erro na resposta --------');
      console.error(data);
      throw new Error(data.message || data.error || 'Erro ao adicionar ao carrinho');
    }

    console.log('--------- 11 - Sucesso! --------');
    console.log('Resposta final:', {
      mensagem: data.message,
      quantidade: data.quantidade,
      valorTotal: data.valorTotalFormatado
    });
    
    updateCartCount(data.quantidade);
    showToast('‚úÖ ' + data.message);
    console.groupEnd();
  } catch (error) {
    console.error('--------- 12 - Erro capturado --------');
    console.error('Mensagem:', error.message);
    showToast('‚ùå ' + (error.message || 'Erro ao adicionar ao carrinho'));
    console.groupEnd();
  }
}

function updateCartCount(count) {
  const cartCountElement = document.getElementById('cartCount');
  if (cartCountElement) {
    cartCountElement.textContent = count;
    cartCountElement.classList.remove('hidden');
  }
}

function showToast(message) {
  const toast = document.getElementById('toast');
  const toastMessage = document.getElementById('toastMessage');
  
  // Ajusta a cor do toast baseado no tipo de mensagem
  if (message.startsWith('‚ùå')) {
    toast.classList.remove('bg-green-500');
    toast.classList.add('bg-red-500');
  } else {
    toast.classList.remove('bg-red-500');
    toast.classList.add('bg-green-500');
  }
  
  toastMessage.textContent = message;
  toast.classList.remove('translate-y-full', 'opacity-0');
  
  setTimeout(() => {
    toast.classList.add('translate-y-full', 'opacity-0');
  }, 3000);
}

// Modal de Detalhes do Produto
function showProductDetails(productId) {
  fetch(`/api/produtos/${productId}`)
    .then(response => response.json())
    .then(produto => {
      // Aqui voc√™ pode implementar a l√≥gica para mostrar o modal com os detalhes do produto
      console.log('Detalhes do produto:', produto);
    })
    .catch(error => console.error('Erro ao carregar detalhes do produto:', error));
}
</script>
@end

@section('scripts')
  @include('home/scripts')
@endsection
